# this procedure is called whenever a packet is generated by some of the MMORPG extremes.
# when it is called, it accumulates the number of packets and the size of the packets
proc count_pkt_sent_ { my_string } {

	global	number_payload_packets_client_server_ number_ack_client_server_ \
			number_payload_packets_server_client_ number_ack_server_client_ \
			acum_size_payload_packets_client_server_ acum_size_payload_packets_server_client_

	# split the string into different variables. Expample: r 53.400003 0 4 tcp 40 ------- 111000 0.0 1.0 2498 1045
	# the first value "first" is not useful
	set fields [split $my_string]
	lassign $fields first type time origin destination pkt_type size flags number	
	
	# calculate the connection number. It is the three last numbers of the "number"
	set connection_ident_ [expr  int ( $number - (int ( $number / 1000 ) * 1000 ) )]
	#puts $my_string\t$connection_ident_

	# the second tharacter (type) is the one ineresting for me. It can be "+", "-", "r" and "d". I am only interested on "+", which means a packet has been sent
	if { $type == "+"} {			;# check if the first character is "+"

		# client-server packets with origin in node 0
		if { ($origin == 0) && ($destination == 8) } {

			if { $size == 40 } {	;# it is an ACK
				set number_ack_client_server_($connection_ident_) [expr $number_ack_client_server_($connection_ident_) + 1 ]

			} else {
				set number_payload_packets_client_server_($connection_ident_) [expr $number_payload_packets_client_server_($connection_ident_) + 1 ]
				set acum_size_payload_packets_client_server_($connection_ident_) [expr $acum_size_payload_packets_client_server_($connection_ident_) + $size - 40 ]	;# the TCP header has to be removed
				#puts "$connection_ident_\tc-s\t$number_payload_packets_client_server_($connection_ident_)\t$acum_size_payload_packets_client_server_($connection_ident_)"
			}			
		} else {

			# client-server packets with origin in node 6
			if { ($origin == 6) && ($destination == 9) } {

				if { $size == 40 } {	;# it is an ACK
					set number_ack_client_server_($connection_ident_) [expr $number_ack_client_server_($connection_ident_) + 1 ]

				} else {
					set number_payload_packets_client_server_($connection_ident_) [expr $number_payload_packets_client_server_($connection_ident_) + 1 ]
					set acum_size_payload_packets_client_server_($connection_ident_) [expr $acum_size_payload_packets_client_server_($connection_ident_) + $size - 40 ]	;# the TCP header has to be removed
					#puts "$connection_ident_\tc-s\t$number_payload_packets_client_server_($connection_ident_)\t$acum_size_payload_packets_client_server_($connection_ident_)"
				}
			} else {

				# server-client packets with origin in node 1
				if { ($origin == 1) && ($destination == 5) } {

					if { $size == 40 } {	;# it is an ACK
						set number_ack_server_client_($connection_ident_) [expr $number_ack_server_client_($connection_ident_) + 1 ]

					} else {
						set number_payload_packets_server_client_($connection_ident_) [expr $number_payload_packets_server_client_($connection_ident_) + 1 ]
						set acum_size_payload_packets_server_client_($connection_ident_) [expr $acum_size_payload_packets_server_client_($connection_ident_) + $size -40 ]	;# the TCP header has to be removed
						#puts "$connection_ident_\ts-c\t$number_payload_packets_server_client_($connection_ident_)\t$acum_size_payload_packets_server_client_($connection_ident_)"
					}
				} else {

					# server-client packets with origin in node 7
					if { ($origin == 7) && ($destination == 5) } {

						if { $size == 40 } {	;# it is an ACK
							set number_ack_server_client_($connection_ident_) [expr $number_ack_server_client_($connection_ident_) + 1 ]

						} else {
							set number_payload_packets_server_client_($connection_ident_) [expr $number_payload_packets_server_client_($connection_ident_) + 1 ]
							set acum_size_payload_packets_server_client_($connection_ident_) [expr $acum_size_payload_packets_server_client_($connection_ident_) + $size - 40 ] ;# the TCP header has to be removed
							#puts "$connection_ident_\ts-c\t$number_payload_packets_server_client_($connection_ident_)\t$acum_size_payload_packets_server_client_($connection_ident_)"
						}
					} 
				}
			}
		}
	}
}


# This procedure writes a summary of the packet sizes, apdu sizes, number of apdu, number of packets
proc apdu_packet_number_calculate_ { } {

	global	total_number_of_connections_ number_apdu_client_server_ number_apdu_server_client_ \
			number_payload_packets_client_server_ number_ack_client_server_ \
			number_payload_packets_server_client_ number_ack_server_client_ \
			acum_size_payload_packets_client_server_ acum_size_payload_packets_server_client_ \
			number_packets_no_saturation_client_server_ number_packets_no_saturation_server_client_ \
			total_bytes_apdu_client_server_ total_bytes_apdu_server_client_

	set client_file_name_ "wow_apdu_iat_files/summary_apdu_client-server_wow_flows.txt"
	set apdu_client_file_ [open $client_file_name_ w]
	set server_file_name_ "wow_apdu_iat_files/summary_apdu_server-client_wow_flows.txt"
	set apdu_server_file_ [open $server_file_name_ w]

	# I write a line with the title of each column
	puts $apdu_client_file_ "connection_id_ num_payload_packets num_payload_packets_no_saturation num_ack num_apdu num_payload_packets/num_payload_packets_no_saturation avg_size_payload_packets total_bytes_apdu total_bytes_packets total_bytes_packets/total_bytes_apdu"
	puts $apdu_server_file_ "connection_id_ num_payload_packets num_payload_packets_no_saturation num_ack num_apdu num_payload_packets/num_payload_packets_no_saturation avg_size_payload_packets total_bytes_apdu total_bytes_packets total_bytes_packets/total_bytes_apdu"

	# I write the values on the files
	for {set connection_id_ 0} { $connection_id_ < $total_number_of_connections_ } { incr connection_id_ } {
		puts $apdu_client_file_ "$connection_id_ $number_payload_packets_client_server_($connection_id_) $number_packets_no_saturation_client_server_($connection_id_) $number_ack_client_server_($connection_id_) $number_apdu_client_server_($connection_id_) [format "%.3f" [expr $number_payload_packets_client_server_($connection_id_) / $number_packets_no_saturation_client_server_($connection_id_)]] [format "%.3f" [expr $acum_size_payload_packets_client_server_($connection_id_) / $number_payload_packets_client_server_($connection_id_) ]] $total_bytes_apdu_client_server_($connection_id_) $acum_size_payload_packets_client_server_($connection_id_) [format "%.3f" [expr $acum_size_payload_packets_client_server_($connection_id_) / $total_bytes_apdu_client_server_($connection_id_)]]"
		puts $apdu_server_file_ "$connection_id_ $number_payload_packets_server_client_($connection_id_) $number_packets_no_saturation_server_client_($connection_id_) $number_ack_server_client_($connection_id_) $number_apdu_server_client_($connection_id_) [format "%.3f" [expr $number_payload_packets_server_client_($connection_id_) / $number_packets_no_saturation_server_client_($connection_id_)]] [format "%.3f" [expr $acum_size_payload_packets_server_client_($connection_id_) / $number_payload_packets_server_client_($connection_id_) ]] $total_bytes_apdu_server_client_($connection_id_) $acum_size_payload_packets_server_client_($connection_id_) [format "%.3f" [expr $acum_size_payload_packets_client_server_($connection_id_) / $total_bytes_apdu_client_server_($connection_id_)]]"
	}

	close $apdu_client_file_
	close $apdu_server_file_
}
